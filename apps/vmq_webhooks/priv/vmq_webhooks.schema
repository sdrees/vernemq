%% -*- mode: erlang -*-
%% ex: ft=erlang

%% @doc To configure and register a webhook a hook and an endpoint
%% need to be configured and this is achieved by associating both with
%% a name. vmq_webhooks.<name>.hook = <hook> associates the hook
%% <hook> with the name <name>. Webhooks are registered in the order
%% of the name given to it. Therefore a webhook with name 'webhook1'
%% is regisered before a webhook with the name 'webhook2'.
{mapping, "vmq_webhooks.$name.hook", "vmq_webhooks.user_webhooks",
 [
  {datatype, {enum,
              [auth_on_register,
               auth_on_publish,
               auth_on_subscribe,
               on_register,
               on_publish,
               on_subscribe,
               on_unsubscribe,
               on_deliver,
               on_offline_message,
               on_client_wakeup,
               on_client_offline,
               on_client_gone,
               on_session_expired,
               auth_on_register_m5,
               auth_on_publish_m5,
               auth_on_subscribe_m5,
               on_register_m5,
               on_publish_m5,
               on_subscribe_m5,
               on_unsubscribe_m5,
               on_deliver_m5,
               on_auth_m5]}},
  {commented, "auth_on_register"},
  {include_default, "webhook1"}
 ]}.

%% @doc Associate an endpoint with a name.
{mapping, "vmq_webhooks.$name.endpoint", "vmq_webhooks.user_webhooks",
 [
  {datatype, string},
  {commented, "http://localhost/myendpoints"},
  {include_default, "webhook1"}
 ]}.

%% @doc Control if the payload should be base64 encoded.
{mapping, "vmq_webhooks.$name.base64encode", "vmq_webhooks.user_webhooks",
 [
  {datatype, flag},
  {default, on},
  {commented, "false"},
  {include_default, "webhook1"},
  hidden
 ]}.

%% @doc Applies only to the auth_on_publish and auth_on_publish_m5
%% webhooks. If true the MQTT payload is ommitted from the JSON
%% object. Defaults to false.
{mapping, "vmq_webhooks.$name.no_payload", "vmq_webhooks.user_webhooks",
 [
  {datatype, flag},
  {default, off},
  {commented, "false"},
  {include_default, "webhook1"},
  hidden
 ]}.

%% @doc Configure the timeout the HTTP client will wait for a response
%% from the remote endpoint. Default to 5000 milliseconds.
{mapping, "vmq_webhooks.$name.response_timeout", "vmq_webhooks.user_webhooks",
 [{datatype, integer},
  hidden,
  {default, 5000}]}.

{translation,
 "vmq_webhooks.user_webhooks",
 fun(Conf) ->
         Suffixes = ["hook", "endpoint", "base64encode", "no_payload", "response_timeout"],
         UNames =
             [
              proplists:get_all_values(
                "$name",
                cuttlefish_variable:fuzzy_matches(["vmq_webhooks", "$name", Suffix], Conf))
               || Suffix <- Suffixes ],
         HookNames = lists:usort(lists:append(UNames)),
         Webhooks =
             [ {SortName,
                #{
                  hook => cuttlefish:conf_get("vmq_webhooks." ++ SortName ++ ".hook", Conf, undefined),
                  endpoint => cuttlefish:conf_get("vmq_webhooks." ++ SortName ++ ".endpoint", Conf, undefined),
                  options => 
                      #{ base64_payload =>
                             cuttlefish:conf_get("vmq_webhooks." ++ SortName ++
                                                     ".base64encode", Conf, true),
                         no_payload =>
                             cuttlefish:conf_get("vmq_webhooks." ++ SortName ++
                                                     ".no_payload", Conf, false),
                         response_timeout => cuttlefish:conf_get("vmq_webhooks." ++ SortName ++
                                                                     ".response_timeout", Conf, 8000)
                       }
                 }}
               || SortName <- HookNames ],
         lists:map(
           fun({SortName, #{endpoint := undefined}}) ->
                   cuttlefish:invalid("vmq_webhooks."
                                      ++ SortName ++ ".endpoint is not defined");
              ({SortName, #{hook := undefined}}) ->
                   cuttlefish:invalid("vmq_webhooks."
                                      ++ SortName ++ ".hook is not defined");
              ({SortName, #{endpoint := Endpoint} = WH}) ->
                   {SortName, maps:update(endpoint, list_to_binary(Endpoint), WH)}
           end, Webhooks)
 end}.

{mapping, "vmq_webhooks.clique_lead_line", "vmq_webhooks.clique_lead_line",
 [{datatype, string},
  hidden,
  {default, "    webhooks    Manage webhooks\n"}]}.

%% @doc Configure the maximum number of HTTP connections maintained in the webhooks pool.
{mapping, "vmq_webhooks.pool_max_connections", "vmq_webhooks.pool_max_connections",
 [{datatype, integer},
  hidden,
  {default, 100}]}.

%% @doc Configure the timeout that we keep the connection alive in the 
%% webhooks connection pool, expressed in milliseconds. 
{mapping, "vmq_webhooks.pool_timeout", "vmq_webhooks.pool_timeout",
 [{datatype, integer},
  hidden,
  {default, 60000}]}.
